% length
%%| ?- length(L, 5).
%%
%%L = [_,_,_,_,_]
%%
%%yes
%%| ?- 

% consult('lecture 17.09.pl').

% length -> myLen/2(+List, )
% + - означает, что аргумент должен быть сопоставлен (задан)
% ? - аргумент может быть как свободным, так и сопоставлены
% - - аргумент должен быть свободным

myLen(Lst, N) :- Lst = [], N = 0.
myLen(Lst, N) :- 
    Lst = [ _ | T ],
    myLen(T, N1),
    N is N1 + 1.

/*
myLen(Lst, N) :- Lst = [], N = 0.
входной список и сопоставляется Lst с []

набл1 сопоставление транзитивно
набл2 lst здесь уже не нужна
*/
myLen1([], 0).
myLen1([ _ | T ], N) :- 
    myLen1(T, N1),
    N is N1 + 1.

% is - не только сопоставление, но и вычисление
/*
как сопоставляются списки?
1) если длины разные, то не сопоставляются
2) если длины одинаковые, то сопоставляются соответствующие элементы
*/

myLen3(0, []).
meLen3(N, [ _ | T]) :-
    meLen3(N1, T),
    N is N1 + 1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

p1(a) .
p1(b) .
p1(c) .

p1(N) :- N = a.
p1(N) :- N = b.
p1(N) :- N = c.
/*
%%%%%%reverse

| ?- reverse(L1, [1,2,3]).

L1 = [3,2,1]

yes

%%%%%%append 
| ?- append([1,2,3], [a,b], X).          

X = [1,2,3,a,b]

yes

%%%%%% nth
| ?- nth(1, [a], a).

yes

%%%%%%prefix

| ?- prefix(L, [a,b,c,d]).

L = [] ? ;

L = [a] ? ;

L = [a,b] ? ;

L = [a,b,c] ? ;

L = [a,b,c,d] ? ;

no
%%%%%%suffix
| ?- suffix(L, [a,b,c,d]).

L = [a,b,c,d] ? ;

L = [b,c,d] ? 

yes
%%%%%%sublist
| ?- sublist([1,2], [1,2,3,4,5,1,2,3,4,5]).

true ? ;

true ? ;

true ? ;

no
%%%%%%
permutation
| ?- permutation([1,2,3],L).

L = [1,2,3] ? ;

L = [1,3,2] ? ;

L = [2,1,3] ? ;

L = [2,3,1] ? ;

L = [3,1,2] ? ;

L = [3,2,1] ? ;

(1 ms) no
%%%%%%%member
| ?- member(a, [a,b,c,d,a]).

true ? ;

yes

| ?- memberchk(a, [a,b,c,d,a]).

yes

%%%%%%%%%%%sort
| ?- sort([3,2,1], [2,3,1]).

no
| ?- sort([3,2,1], [1,2,3]).

yes
сортировка с удалением повторов
| ?- msort([243,2431,243113], L).

L = [243,2431,243113]

без удаления повторов
*/ 

/* map(lst1, func, lst2)
term =.. [name, arg1, ........]
| ?- T =.. [q,1,2,X]
.

T = q(1,2,X)

yes




| ?- T =.. [length, [1,2,3], 3], call(T).

T = length([1,2,3],3)

yes




| ?- T =.. [length, [1,2,3], N], call(T).

N = 3
T = length([1,2,3],3)

yes
| ?- T =.. [length, [1,2,3], N].         

T = length([1,2,3],N)

yes
*/

